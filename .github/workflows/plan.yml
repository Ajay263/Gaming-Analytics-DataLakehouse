name: 'Terraform Plan'

on:
  push:
    branches: [ 'main' ]
  workflow_dispatch:
  pull_request:
  workflow_call:
    secrets:
      ROLE_TO_ASSUME:
        required: true
      EC2_SSH_PUBLIC_KEY:
        required: true

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    env:
      GH_TOKEN: ${{ github.token }}
      TF_VAR_public_key: ${{ secrets.EC2_SSH_PUBLIC_KEY }}

    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
        aws-region: us-east-1

    - name: Checkout
      uses: actions/checkout@v4

    # Add debug step after checkout
    - name: Debug public key
      run: |
        if [ -n "$TF_VAR_public_key" ]; then
          echo "Public key is set"
        else
          echo "Public key is NOT set"
        fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.4

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -out=plan.tfplan
        terraform show -json plan.tfplan > /tmp/plan.json
        cat /tmp/plan.json

    - name: Setup OPA
      uses: open-policy-agent/setup-opa@v2
      with:
        version: latest

    - name: Run OPA Tests
      run: |
        opaout=$(opa eval --data ../policies/plan.rego --input /tmp/plan.json "data.terraform.deny" | jq -r '.result[].expressions[].value[]')
        [ -z "$opaout" ] && exit 0 || echo "$opaout" && gh pr comment ${{ github.event.pull_request.number }} --body "### $opaout" && exit 1
